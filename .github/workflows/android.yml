name: Build and Release Stox Android App

on:
  workflow_dispatch: # Allows manual triggering
  # push:
  #   branches: [ main ] # Example: Trigger on push to main
  # release:
  #   types: [ published ] # Example: Trigger when a GitHub Release is published

jobs:
  lint-android:
    name: Lint Android App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Create local.properties with API Key
        run: |
          echo "Creating local.properties file..."
          echo "polygonApiKey=${{ secrets.POLYGONAPIKEY }}" > local.properties
          echo "File created. Content:"
          cat local.properties # For debugging, shows the content

      - name: Run Android Lints
        run: ./gradlew :app:lint # Or :app:lintDebug etc.

  build-android:
    name: Build and Sign Android APK
    runs-on: ubuntu-latest
    needs: [lint-android] # Make lint a prerequisite

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Create local.properties with API Key
        run: |
          echo "Creating local.properties file..."
          echo "polygonApiKey=${{ secrets.POLYGONAPIKEY }}" > local.properties
          echo "File created. Content:"
          cat local.properties # For debugging, shows the content

      - name: Build Release APK
        run: ./gradlew :app:assembleRelease

      - name: List unsigned APKs (for debugging)
        run: |
          echo "Listing contents of app/build/outputs/apk/release:"
          ls -R app/build/outputs/apk/release || echo "Directory app/build/outputs/apk/release not found or empty after build."

      - name: List available Android SDK Build Tools (for debugging)
        run: |
          echo "ANDROID_SDK_ROOT is: $ANDROID_SDK_ROOT"
          echo "Available build-tools versions:"
          ls -1 $ANDROID_SDK_ROOT/build-tools/ || echo "Could not list build-tools directory."

      - name: Setup build tool version variable
        shell: bash
        run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
          echo Last build tool version is: $BUILD_TOOL_VERSION

      - name: Debug Secrets Presence (Temporary)
        run: |
          if [ -z "${{ secrets.ANDROID_ALIAS }}" ]; then echo "::warning::ANDROID_ALIAS secret is empty or not set."; else echo "ANDROID_ALIAS secret is present."; fi
          if [ -z "${{ secrets.ANDROID_KEY_STORE_PASSWORD }}" ]; then echo "::warning::ANDROID_KEY_STORE_PASSWORD secret is empty or not set."; else echo "ANDROID_KEY_STORE_PASSWORD secret is present."; fi
          if [ -z "${{ secrets.ANDROID_KEY_PASSWORD }}" ]; then echo "::warning::ANDROID_KEY_PASSWORD secret is empty or not set."; else echo "ANDROID_KEY_PASSWORD secret is present."; fi
          if [ -z "${{ secrets.ANDROID_SIGNING_KEY }}" ]; then echo "::warning::ANDROID_SIGNING_KEY secret is empty or not set."; else echo "ANDROID_SIGNING_KEY secret is present."; fi

          
      - name: Sign APK
        id: sign_apk
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"
        

      - name: Verify Signed APK and Prepare Upload Path
        id: verify_signed_apk
        run: |
          signed_apk_path="${{ steps.sign_apk.outputs.signedReleaseFile }}"
          echo "Signed APK path from signing action: $signed_apk_path"
          if [ -f "$signed_apk_path" ]; then
            echo "Signed APK confirmed to exist at: $signed_apk_path"
            echo "upload_file_path=$signed_apk_path" >> $GITHUB_OUTPUT
          else
            echo "::error::Signed APK not found at '$signed_apk_path' (output from sign_apk step)."
            echo "This can happen if the 'releaseDirectory' or 'buildToolsVersion' for sign_apk was incorrect or if signing failed silently."
            echo "Listing contents of expected directory: app/build/outputs/apk/release/"
            ls -R app/build/outputs/apk/release/ || echo "Directory app/build/outputs/apk/release/ not found or empty."
            echo "Re-listing available build-tools versions (from ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT/build-tools/):"
            ls -1 $ANDROID_SDK_ROOT/build-tools/ || echo "Could not list build-tools directory."
            exit 1
          fi

      - name: Upload Signed APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-apk # Artifact name for download later
          path: ${{ steps.verify_signed_apk.outputs.upload_file_path }}
          # retention-days: 7 # Optional: how long to keep the artifact

  publish-release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build-android]
    permissions:
      contents: write # To create releases and upload assets
    steps:
      - name: Download Signed APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: signed-apk # Matches upload name
          path: release-assets/ # This will download the APK into release-assets/
                                # e.g., release-assets/app-release-signed.apk

      - name: List Downloaded Files
        run: |
          echo "Listing contents of release-assets/ after download:"
          ls -R release-assets/

      - name: Set up GitHub CLI
        run: |
          type gh > /dev/null 2>&1 || {
            echo "gh CLI not found, installing..."
            sudo apt-get update
            sudo apt-get install -y gh
          }
          gh --version

      - name: Create GitHub Release and Upload APK
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: v1.0.1 # TODO: Make this dynamic (e.g., from input, or git tag)
          RELEASE_NAME: "Stox v1.0.1" # TODO: Make this dynamic
          RELEASE_BODY: |
            Release of Stox Android App version 1.0.1.
            Automated build.
          # This path assumes the uploaded artifact contained a file named 'app-release-signed.apk'
          # (or whatever the signing step actually named it)
          APK_FILE_PATH: release-assets/app-release-signed.apk # VERIFY THIS FILENAME matches the actual signed file name
          APK_ASSET_NAME: Stox-v1.0.1.apk # Desired name on the release page
        run: |
          echo "Creating release for tag $RELEASE_TAG"
          # Check if APK_FILE_PATH exists
          if [ ! -f "$APK_FILE_PATH" ]; then
            echo "::error::APK file not found at $APK_FILE_PATH after download."
            echo "Actual files in release-assets/:"
            ls -R release-assets/ # Show what was actually downloaded
            exit 1
          fi
          gh release create "$RELEASE_TAG" \
            --repo "$GITHUB_REPOSITORY" \
            --title "$RELEASE_NAME" \
            --notes "$RELEASE_BODY" \
            --draft=false \
            --prerelease=false \
            "$APK_FILE_PATH#$APK_ASSET_NAME"
          echo "Release created and APK uploaded."
